
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Buildkite Configuration
        Parameters:
        - BuildkiteAgentRelease
        - BuildkiteAgentToken
        - BuildkiteAgentTags
        - BuildkiteQueue
        - BuildkiteOrgSlug
        - BuildkiteApiAccessToken

      - Label:
          default: Network Configuration
        Parameters:
        - VpcId
        - Subnets
        - AvailabilityZones
        - SecurityGroupId
        - AssociatePublicIpAddress

      - Label:
          default: Instance Configuration
        Parameters:
        - ImageId
        - InstanceType
        - AgentsPerInstance
        - KeyName
        - SpotPrice
        - SecretsBucket
        - VaultServerUrl
        - ArtifactsBucket
        - AuthorizedUsersUrl
        - BootstrapScriptUrl
        - RootVolumeSize
        - AssociatePublicIpAddress
        - ManagedPolicyARN

      - Label:
          default: Auto-scaling Configuration
        Parameters:
        - MinSize
        - MaxSize
        - ScaleUpAdjustment
        - ScaleDownAdjustment
        - ScaleDownPeriod

      # - Label:
      #     default: Docker Daemon Configuration

      - Label:
          default: Docker Registry Configuration
        Parameters:
        - ECRAccessPolicy

      - Label:
          default: Plugin Configuration
        Parameters:
        - EnableSecretsPlugin
        - EnableVaultSecretsPlugin
        - VaultServerUrl
        - VaultAuthMethod
        - VaultAuthRole
        - VaultAuthHeader
        - EnableECRPlugin
        - EnableDockerLoginPlugin

Parameters:
  KeyName:
    Description: SSH keypair used to access the buildkite instances
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1

  BuildkiteAgentRelease:
    Type: String
    AllowedValues:
      - stable
      - beta
      - edge
    Default: "beta"

  BuildkiteAgentToken:
    Description: Buildkite agent token
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteOrgSlug:
    Description: Buildkite organization slug
    Type: String
    MinLength: 1

  BuildkiteAgentTags:
    Description: Additional tags seperated by commas to provide to the agent. E.g os=linux,llamas=always
    Type: String
    Default: ""

  BuildkiteApiAccessToken:
    Description: Buildkite API access token with read_pipelines, read_builds and read_agents (required for metrics)
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  AgentsPerInstance:
    Description: Number of Buildkite agents to run on each instance
    Type: Number
    Default: 1
    MinValue: 1

  SecretsBucket:
    Description: Optional - Name of an existing S3 bucket containing pipeline secrets (Created if left blank)
    Type: String
    Default: ""

  VaultServerUrl:
    Description: Optional - Url of an existing Vault Server to use for secrets
    Type: String
    Default: ""

  VaultAuthMethod:
    Description: Optional - Vault Auth Method to use
    Type: String
    Default: ""

  VaultAuthRole:
    Description: Optional - Vault Auth role to use
    Type: String
    Default: ""

  VaultAuthHeader:
    Description: Optional - Vault Auth header to use
    Type: String
    NoEcho: true
    Default: ""

  ArtifactsBucket:
    Description: Optional - Name of an existing S3 bucket for build artifact storage
    Type: String
    Default: ""

  BootstrapScriptUrl:
    Description: Optional - HTTPS or S3 URL to run on each instance during boot
    Type: String
    Default: ""

  AuthorizedUsersUrl:
    Description: Optional - HTTPS or S3 URL to periodically download ssh authorized_keys from
    Type: String
    Default: ""

  VpcId:
    Type: String
    Description: Optional - Id of an existing VPC to launch instances into. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of two existing VPC subnet ids where EC2 instances will run. Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of AZs that subnets are created in (if Subnets parameter is not specified)
    Default: ""

  InstanceType:
    Description: Instance type
    Type: String
    Default: t2.nano
    MinLength: 1

  SpotPrice:
    Description: Spot bid price to use for the instances. 0 means normal (non-spot) instances
    Type: String
    Default: 0

  MaxSize:
    Description: Maximum number of instances
    Type: Number
    Default: 10
    MinValue: 1

  MinSize:
    Description: Minimum number of instances
    Type: Number
    Default: 0

  ScaleUpAdjustment:
    Description: Number of instances to add on scale up events (ScheduledJobsCount > 0 for 1 min)
    Type: Number
    Default: 5
    MinValue: 0

  ScaleDownAdjustment:
    Description: Number of instances to remove on scale down events (UnfinishedJobs == 0 for ScaleDownPeriod)
    Type: Number
    Default: -1
    MaxValue: 0

  ScaleDownPeriod:
    Description: Number of seconds UnfinishedJobs must equal 0 before scale down
    Type: Number
    Default: 1800

  RootVolumeSize:
    Description: Size of each instance's root EBS volume (in GB)
    Type: Number
    Default: 250
    MinValue: 10

  SecurityGroupId:
    Type: String
    Description: Optional - Security group id to assign to instances
    Default: ""

  ImageId:
    Type: String
    Description: Optional - Custom AMI to use for instances (must be based on the stack's AMI)
    Default: ""

  ManagedPolicyARN:
    Type: String
    Description: Optional - ARN of a managed IAM policy to attach to the instance role
    Default: ""

  ECRAccessPolicy:
    Type: String
    Description: ECR access policy to give container instances
    AllowedValues:
      - none
      - readonly
      - poweruser
      - full
    Default: "none"

  AssociatePublicIpAddress:
    Type: String
    Description: Associate instances with public IP addresses
    AllowedValues:
      - true
      - false
    Default: "true"

  EnableSecretsPlugin:
    Type: String
    Description: Enables s3-secrets plugin for all pipelines
    AllowedValues:
      - true
      - false
    Default: "true"

  EnableVaultSecretsPlugin:
    Type: String
    Description: Enables vault-secrets plugin for all pipelines
    AllowedValues:
      - true
      - false
    Default: "false"

  EnableECRPlugin:
    Type: String
    Description: Enables ecr plugin for all pipelines
    AllowedValues:
      - true
      - false
    Default: "true"

  EnableDockerLoginPlugin:
    Type: String
    Description: Enables docker-login plugin for all pipelines
    AllowedValues:
      - true
      - false
    Default: "true"

Outputs:
  ManagedSecretsBucket:
    Value:
      "Fn::If": [CreateSecretsBucket, { Ref: ManagedSecretsBucket }, "" ]

  ManagedSecretsLoggingBucket:
    Value:
      "Fn::If": [CreateSecretsBucket, { Ref: ManagedSecretsLoggingBucket }, "" ]

Conditions:
    UseSpotInstances:
      "Fn::Not": [ "Fn::Equals": [ { Ref: SpotPrice }, 0 ] ]

    CreateVpcResources:
      "Fn::Equals": [ { Ref: VpcId }, "" ]

    CreateSecurityGroup:
      "Fn::Equals": [ { Ref: SecurityGroupId }, "" ]

    CreateSecretsBucket:
      "Fn::Equals": [ { Ref: SecretsBucket }, "" ]

    UseSpecifiedSecretsBucket:
      "Fn::Not": [ "Fn::Equals": [ { Ref: SecretsBucket }, "" ] ]

    UseSpecifiedAvailabilityZones:
      "Fn::Not": [ "Fn::Equals": [ "Fn::Join": [ "", { Ref: AvailabilityZones } ], "" ]  ]

    UseArtifactsBucket:
      "Fn::Not": [ "Fn::Equals": [ { Ref: ArtifactsBucket }, "" ] ]

    UseDefaultAMI:
      "Fn::Equals": [ { Ref: ImageId }, "" ]

    UseManagedPolicyARN:
      "Fn::Not": [ "Fn::Equals": [ { Ref: ManagedPolicyARN }, "" ] ]

    UseECR:
      "Fn::Not": [ "Fn::Equals": [ { Ref: ECRAccessPolicy }, "none" ] ]

    UseAutoscaling:
      "Fn::Not": [ "Fn::Equals": [ { Ref: MaxSize }, { Ref: MinSize } ] ]

    CreateMetricsStack:
      "Fn::And": [ Condition: UseAutoscaling, { "Fn::Not": [ "Fn::Equals": [ { Ref: BuildkiteApiAccessToken }, "" ] ] } ]

Mappings:
  ECRManagedPolicy:
    none      : { Policy: '' }
    readonly  : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly' }
    poweruser : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser' }
    full      : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess' }

  MetricsLambdaBucket:
    us-east-1 : { Bucket: "buildkite-metrics" }
    us-east-2 : { Bucket: "buildkite-metrics-us-east-2" }
    us-west-1 : { Bucket: "buildkite-metrics-us-west-1" }
    us-west-2 : { Bucket: "buildkite-metrics-us-west-2" }
    eu-west-1 : { Bucket: "buildkite-metrics-eu-west-1" }
    eu-west-2 : { Bucket: "buildkite-metrics-eu-west-2" }
    eu-central-1 : { Bucket: "buildkite-metrics-eu-central-1" }
    ap-northeast-1 : { Bucket: "buildkite-metrics-ap-northeast-1" }
    ap-northeast-2 : { Bucket: "buildkite-metrics-ap-northeast-2" }
    ap-southeast-1 : { Bucket: "buildkite-metrics-ap-southeast-1" }
    ap-southeast-2 : { Bucket: "buildkite-metrics-ap-southeast-2" }
    ap-south-1 : { Bucket: "buildkite-metrics-ap-south-1" }
    sa-east-1 : { Bucket: "buildkite-metrics-sa-east-1" }


Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ { Ref: IAMRole } ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: { "Fn::Sub": "${AWS::StackName}-Role" }
      ManagedPolicyArns:
        - "Fn::If":
          - UseManagedPolicyARN
          - { Ref: ManagedPolicyARN }
          - { Ref: 'AWS::NoValue' }
        - "Fn::If":
          - UseECR
          - { "Fn::FindInMap": [ ECRManagedPolicy, { Ref: ECRAccessPolicy }, 'Policy' ] }
          - { Ref: 'AWS::NoValue' }
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com, ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:RecordLifecycleActionHeartbeat
              - autoscaling:CompleteLifecycleAction
              - autoscaling:SetInstanceHealth
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:*
              - sns:Unsubscribe
              - sns:Subscribe
            Resource: "*"
      Roles:
        - { Ref: IAMRole }

  ManagedSecretsLoggingBucket:
    Type: AWS::S3::Bucket
    Condition: CreateSecretsBucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite

  ManagedSecretsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateSecretsBucket
    DeletionPolicy: Retain
    Properties:
      LoggingConfiguration:
        DestinationBucketName: { Ref: ManagedSecretsLoggingBucket }
      VersioningConfiguration:
        Status: Enabled

  ManagedSecretsBucketPolicy:
    Type: AWS::IAM::Policy
    Condition: CreateSecretsBucket
    Properties:
      PolicyName: SecretsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Get
              - s3:List*
            Resource:
              - { "Fn::Sub": "arn:aws:s3:::${ManagedSecretsBucket}/*" }
              - { "Fn::Sub": "arn:aws:s3:::${ManagedSecretsBucket}" }
      Roles:
        - { Ref: IAMRole }

  UnmanagedSecretsBucketPolicy:
    Type: AWS::IAM::Policy
    Condition: UseSpecifiedSecretsBucket
    Properties:
      PolicyName: SecretsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Get
              - s3:List*
            Resource:
              - { "Fn::Sub": "arn:aws:s3:::${SecretsBucket}/*" }
              - { "Fn::Sub": "arn:aws:s3:::${SecretsBucket}" }
      Roles:
        - { Ref: IAMRole }

  ArtifactsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseArtifactsBucket
    Properties:
      PolicyName: ArtifactsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Put*
              - s3:List*
              - s3:Get*
            Resource:
              - { "Fn::Sub": "arn:aws:s3:::${ArtifactsBucket}/*" }
              - {"Fn::Sub": "arn:aws:s3:::${ArtifactsBucket}" }
      Roles:
        - { Ref: IAMRole }

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: { Ref: AssociatePublicIpAddress }
      SecurityGroups: [ "Fn::If": [ "CreateSecurityGroup", { Ref: SecurityGroup }, { Ref: SecurityGroupId } ] ]
      KeyName : { Ref: KeyName }
      IamInstanceProfile: { Ref: IAMInstanceProfile }
      InstanceType: { Ref: InstanceType }
      SpotPrice:
        { "Fn::If": [ "UseSpotInstances", { Ref: SpotPrice }, { Ref: 'AWS::NoValue' } ] }
      ImageId :
        { "Fn::If": [ "UseDefaultAMI", { "Fn::FindInMap": [ AWSRegion2AMI, { Ref: 'AWS::Region' }, 'AMI'] }, { Ref: ImageId } ] }
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: { Ref: RootVolumeSize }, VolumeType: gp2 }
      UserData:
        "Fn::Base64":
          "Fn::Sub":
            - |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              MIME-Version: 1.0
              --==BOUNDARY==
              Content-Type: text/cloud-boothook; charset="us-ascii"
                /usr/local/bin/bk-configure-docker.sh

              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              #!/bin/bash -xv
              BUILDKITE_STACK_NAME="${AWS::StackName}" \
              BUILDKITE_STACK_VERSION=dev \
              BUILDKITE_AWS_STACK_PUBLIC_IP=${AssociatePublicIpAddress} \
              BUILDKITE_SECRETS_BUCKET="${LocalSecretsBucket}" \
              BUILDKITE_SECRETS_VAULT_SERVER="${VaultServerUrl}" \
              BUILDKITE_PLUGIN_VAULT_SECRETS_AUTH_METHOD="${VaultAuthMethod:-}" \
              BUILDKITE_PLUGIN_VAULT_SECRETS_AUTH_HEADER="${VaultAuthHeader:-}" \
              BUILDKITE_PLUGIN_VAULT_SECRETS_ROLE="${VaultAuthRole:-}" \
              BUILDKITE_AGENT_TOKEN="${BuildkiteAgentToken}" \
              BUILDKITE_AGENTS_PER_INSTANCE="${AgentsPerInstance}" \
              BUILDKITE_AGENT_TAGS="${BuildkiteAgentTags}" \
              BUILDKITE_AGENT_RELEASE="${BuildkiteAgentRelease}" \
              BUILDKITE_QUEUE="${BuildkiteQueue}" \
              BUILDKITE_ELASTIC_BOOTSTRAP_SCRIPT="${BootstrapScriptUrl}" \
              BUILDKITE_AUTHORIZED_USERS_URL="${AuthorizedUsersUrl}" \
              BUILDKITE_ECR_POLICY=${ECRAccessPolicy} \
              BUILDKITE_LIFECYCLE_TOPIC=${AgentLifecycleTopic} \
              AWS_DEFAULT_REGION=${AWS::Region} \
              SECRETS_PLUGIN_ENABLED=${EnableSecretsPlugin} \
              ECR_PLUGIN_ENABLED=${EnableECRPlugin} \
              VAULT_SECRETS_PLUGIN_ENABLED=${EnableVaultSecretsPlugin} \
              DOCKER_LOGIN_PLUGIN_ENABLED=${EnableDockerLoginPlugin} \
              AWS_REGION=${AWS::Region} \
                /usr/local/bin/bk-install-elastic-stack.sh
              --==BOUNDARY==--
            - LocalSecretsBucket:
                "Fn::If":
                  - CreateSecretsBucket
                  - { Ref: ManagedSecretsBucket }
                  - { Ref: SecretsBucket }

  AgentLifecycleTopic:
    Type: AWS::SNS::Topic

  AgentLifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com ]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AgentLifecyclePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: { Ref: AgentLifecycleTopic }
      Path: /

  AgentLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: { Ref: AgentAutoScaleGroup }
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 120
      NotificationTargetARN: { Ref: AgentLifecycleTopic }
      RoleARN: { "Fn::GetAtt" : [ "AgentLifecycleHookRole", "Arn" ] }

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        { "Fn::If": [ "CreateVpcResources", [ { Ref: Subnet0 }, { Ref: Subnet1 } ], { Ref: Subnets } ] }
      LaunchConfigurationName: { Ref: AgentLaunchConfiguration }
      MinSize: { Ref: MinSize }
      MaxSize: { Ref: MaxSize }
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupPendingInstances
      TerminationPolicies:
        - OldestLaunchConfiguration
        - ClosestToNextInstanceHour
      Tags:
        - Key: Role
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: Name
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: BuildkiteAgentRelease
          Value: { Ref: BuildkiteAgentRelease }
          PropagateAtLaunch: true
        - Key: BuildkiteQueue
          Value: { Ref: BuildkiteQueue }
          PropagateAtLaunch: true

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: { Ref: MinSize }
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Enable access to SSH
      VpcId:
        "Fn::If":
          - "CreateVpcResources"
          - { Ref: Vpc }
          - { Ref: VpcId }
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: { Ref: 'AWS::StackName' }
